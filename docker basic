
docker
php
nginx
=====
docker语法:
  docker [OPTIONS] COMMAND
docker COMMAND语法:
  因于COMMAND有很多,因此还要看具体命令的帮助文件,如docker build --help
docker命令分为两种,一种是Management命令,一种是Action命令, 管理命令用来指定被管理的对象,动作命令用来指定在该对象上要执行的具体动作;而我们见到最多的docker run可以看成是docker container run,docker build可以看成是docker builder build或docker image build,所以可以看的出来不同的对象可能拥有相同的动作,其实按照它的逻辑想一下都是合逻辑的.之所以我们平时可以见到许多省略object的形式,是因为对于相应动作来说,object是唯一的,不会有歧义,如docker run,在docker中只有容器能被运行,所以默认的就会预处理为docker container run,按照我的逻辑特殊一点的就是刚刚提到的docker build, 因为builder对象和image对象都有build动作,但二者的行为是一致的,所以在预处理的时候默认为docker builder build或docker image build都没问题.
  *.个人感觉help中Magement Command的命名并不恰当,因为它指定的是被管理的对象, 而非命令,因此感觉将语法改为docker [OPTIONS] [OBJETCT] COMMAND, 将Management Command改为Object更好一些.
=====
下面主要是以"阶段+目的"为主线来说一下, 即"哪个阶段-你都能做什么-相应的应要使用什么命令":
下面的命令都是help文件中的信息,不是太详细, 最好再参考一下: https://docs.docker.com/engine/reference/commandline/命令
第一阶段: 构建一个image:
**a.构建过程中能做什么(即docker build后都能跟什么参数,只讲三个最常用的参数):
******指定Dockerfile文件位置: -f path/of/Dockerfile
******指定构建好的image标签: -t repo/tag_name:version  //可以指定多个-t,最常用的就是最后一次构建时除了明确version为某个点分数字外, 再打上一个为latest的version
******指定上下文目录位置: path/of/context
****例子:
    docker build .   //此时Dockerfile从当前目录取, image's tag为随机串(sha256)
    docker build -t repo1/hello:1.0 .  //这种应该是最常用的了, 即最通常的思维是以当前目录为上下文目录,并且将Dockerfile文件也放在这里, 最后给生成的image命个名
    docker build -t repo2/who:1.1 -f /Dockerfile /tmp/x  //这种情况就是使用/Dockerfile作为构建文件, 然后将/tmp/x目录作为上下文目录
    *.其它的例子就不写了,自己排列组合即可,写多也乱.
**b.得到了image后你能做什么(即docker image后都可以有什么动作,当然动作也可以有参数):
******查看我当前都有哪些images: docker image ls
******查看某个image的构建历史: docker image history image_name  //想到的使用场景是可以看到每个Dockerfile中的每个指令层或叫生成的子image都多大,对于优化应该有用,并不是所有指令都会增加大小,如WORKDIR
******删除某个image:docker image rm image_name  //删除所有images,或以使用docker image ls | awk 'NR>1 {print $3}' | xargs docker image rm
******查看某个image的详细信息: docker image inspect image_name  //关于image很多详细的属性
******将某个/些image[s]打包并存储到本地: docker image save -o saved_image.tar image1[ image2...]
******与存储到本地相对应的从本地加载: docker image load -i saved_image.tar  //需要注意直接加载后往往在docker image ls中看不到,此时可以使用docker image ls -a看到, 如果想从docker image ls中看到的话,需要使用docker tag给该image打个标签
******给image打标签: docker image tag 源id 标签名  //说是标签名,但docker image ls看到的相应列标题为REPOSITORY,这一点感觉对初学者非常不友好,也就是说对-t repo/name:version, repo/name会理解为image名称,version理解为版本号,但到了docker image ls中名词解释全变了,repo/name为REPOSITORY值,而version为TAG列的值. 这里我写成repo/name在pull和push的时候是有影响的,此时repo/name会被认为是repo目录下的name.如果我docker image push bbq:latest,则推送的完整地址是:docker.io/library/bbq,如果我docker image push XYZ/bbq:later,则推送的完整地址是: docker.io/XYZ/bbq. 在推送的时候你才能理解为啥docker image ls时会将-t XYZ/abc:latest中的XYZ/abc的表头写为REPOSITORY.从输出情况看,如果只是abc这种形式,默认是在library下,即library/abc
        *.如果是已经有标签名的,你还可以给该image一个新别名,此时docker image ls中会多出一条记录  //如docker image tag XYZ/abc:latest bbq:first
******从远程库拉取image: docker image pull tag_name[:version]  //tag_name有两种写法, abc,此时从默认的library/目录下找,XYZ/abc,此时从XYZ目录下找
******向远程库推送image: docker image push tag_name[:version]  //不加:version则默认为:latest
        *.远程推送要注意,1.要先登录:docker login -u username,执行后会让你输密码,如果密码对,提示登录成功, 假设我的用户名为shenhuxi;
                       2.你最终推送的image标签格式应该是: 你的用户名/任意名称:任意标签, 如:你在构建的时候用的-t是XYZ/abc:latest,但你推送的时候不能是docker push XYZ/abc:latest,因为如果你这样写实际是将abc:latest推送到docker.io/XYZ/这个目录下, 而你目前只有权限向docker.io/shenhuxi/这个目录里推送文件,所以在推送前, 你要使用docker image tag XYZ/abc:latest shenhuxi/abc:latest修改一下要推送image的标签; 有时候我们在docker pull的时候只写了一个名字,如mysql,此时是从docker.io/library/目录下拉取,也就是说在拉取前会将mysql预处理成library/mysql:latest
******删除没有任何container引用的images: docker image prune -a //https://docs.docker.com/config/pruning/ 里面有对各种对象的prune的用法; https://stackoverflow.com/questions/45142528/what-is-a-dangling-image-and-what-is-an-unused-image解释什么叫dangling images,以及如何查找dangling images
        *.也就是说如果docker container ls -a 或docker container ps -a里面存在的containers,不管该容器状态是什么样,只要该容器引用的image就不会在docker image prune -a中被删掉,并且-a还会同时删掉下一条说的dangling images.
        *.而不加-a参数的docker image prune则删的是基本上是docker image ls时,REPOSITORY列显示为<none>的也没有子image引用它们的那些images,它们存在的意义基本上就是为了缓存,使用docker images -f dangling=true可以查看当前系统上的dangling images
        *prune -a强调的是只要是没有container使用的images都会被删掉; 而无参prune引调的是没有被container使用的并且没有标签的;二者都不能被子image引用.
******从tar文件导入文件系统image:docker image import x.tar  //这个tar文件可以是docker image save -o x.tar保存的, 也可以是docker container export x.tar
        *.需要注意的是import的image和load加载的image是有区别的, load的image和没导出之前的用法一样,而load的image只是讲文件系统上的文件导过来了,最明显的特征就是CMD,ENTRYPOINT入口点命令没导进来, 运行时必须指定要执行的命令.
        *.至于用处,想到的一种情景是你构建好的imageA中已经将某个任务的环境构建好了,如python环境, 这样当你把imageA的文件系统导进来后,使用docker image tag给该image打个标签,然后再新建Dockerfile,此时该Dockerfile的FROM就是刚刚打的标签,下面直接就可以使用RUN指令执行python脚本了.
        *.对比docker container commit container_id new_image_tag 它根据当前正在运行的容器contain_id,创建一个新的image,特点就是不光保存了文件系统的改变,Dockerfile指令内容也没变(https://docs.docker.com/engine/reference/commandline/commit/ 还可以通过使用--change选项改变新image的一些Dockerfile指令,详见链接),如,ENTRANCE,CMD(基image运行时未指定命令时,新生成的image中CMD不变, 但如果基image运行时指定了命令,则新命令的CMD值为基image在运行时自定义的那个命令,这个测试可以让基image的Dockerfile的CMD值为tail -f /dev/null,然后build得到image后,执行docker run 基image sleep 20,此处注意我是在docker run时指定的入口命令,会覆盖掉Dockerfile中的CMD,此时快速打开第二个窗口执行docker container commit 基image容器id new_tag,最后运行这个新产生的image,看看等20秒是否会自动退出,如果会退出,则说明新产生的image中CMD使用的是运行基image时现定义的那个,而非基image的Dockerfile中CMD的默认值 )
=====
第二阶段,根据image运行得到容器
**a.怎么运行image得到容器(docker run,只讲常用的几个参数)
******后台运行: -d   //前提是你的CMD或docker run时指定了阻塞前端进行的命令,如tail -f /dev/null,否则加上-d也没用
******端口映射: -p, -P  //-p 主机端口:docker端口, 可以指定多个-p; -P是自动将Dockerfile中的EXPOSE指定的端口映射为主机的随机端口,不过使用-P时需要注意,基础image如果有映口映射,也会被映射,如我的Dockerfile中有FROM mysql,此时3306和33060应该都在mysql的Dockerfile中,而在我的Dockerfile中我有EXPOSE 10000,则最终docker run -P我建好的image之后,使用docker container port 容器id查看,3306,33060,10000都有被映射
******前台前互: -it  //后面命令用/bin/bash,这是前端交互最常见的一种做法,即docker run -it image_id /bin/bash
       *.-it其实是两个单独的命令,-i表示可以进行交互和-t表示分配一个伪终端, interactive和tty的简写, 如: docker run -it --rm --name test  top -H,试着只写-i或-t时,输入q有什么反应
       *.docker run 后面使用/bin/bash 前面参数使用-di或-dt也可以导致后台运行,现在弄不明白,-i和-t到底起什么作用.
******退出容器后自动删除建立的容器: -rm    //这个可以使用docker container ps -a看一下不加该参数退出前后有啥变化,加了该参数,退出前后有啥变化   
****例子:
       docker run -it image_id /bin/bash     //可以直接在当前tty中操作docker容器, exit退出
       docker run -d image_id tail -f /dev/null   //后台运行容器,因为有tail在这一直阻塞着进程,所以容器一直处于运行中,cnblogs中也说过,容器说白了就是一个进程, 你没有阻塞进程的语句,它执行完就退出了是完全正常的逻辑
       docker run -dit image_id /bin/bash 
        *.进入后台运行的容器: docker container exec -it 容器id /bin/bash
                           docker container attach 容器id    //前提是docker run时,后面的命令是/bin/bash一类的shell,这样做我猜测attach到的是容器中最前端的那个进程,这个进程只有是shell我们才能和它交互
        **.docker run后面的命令与CMD(exec,shell,default)和ENTRYPOINT(exec,shell)的关系:单独总结,学习这块特别需要注意的就是并不是所有情况docker run后的命令都会成为入口命令,当entrypoint是shell形式时,CMD和docker run后面的命令都会被忽略的
**b.有了容器后我们都能对它干什么
******运行容器: docker container run image  //docker run就是它的简写形式 run=create+start. 这条上面已经说了,不过既然这里说的是container,而run又作为container的子命令还是写在这里
******创建容器: docker container create 选项 image_name 命令  //基本上create的用法和docker container run的用法一样, 只不过创建后没有运行而已
******启动容器: docker container start 容器名  //docker container ls -a的容器都可以被作为启动对象, 默认启动后是后台运行的, 即使image的入口命令是前台阻塞的
******删除容器: docker container rm 容器名  //docker container ls -a中的所有容器都可以作为被删除的对象
******查看当前正在运行的容器: docker container ls  //查看所有状态的容器(不仅是运行中的,还有状态是已停止的,已创建的等): docker container ls -a
******和主机文件系统互传文件: docker container cp 容器名:容器文件路径|本地路径 本地路径|容器名:容器文件路径  //docker container ls -a下所有状态的容器都可作为对象
******显示容器内正在运行的进程(非实时): docker container top 容器名
******附加到容器的当前进程: docker container attach 正在运行的容器名  //如果前端是/bin/bash这类, 可以直接得到交互式shell,如果是apachectl -D FOREGROUND这种前端阻塞的,则本地shell也就成了阻塞的了,并且此时容器中apache前端有什么输入输出错误我们都能看到
******在容器中执行任意命令: docker container exec 正在运行的容器  //最常用的便是docker container exec -it 容器名 /bin/bash,此时可以得到一个新的可交互式会话窗口,这就比attach强太多了,attach只是将当前shell附加到容器的当前进程; 而exec可以在新会话中执行任意命令,你可以理解为exec是容器新建了个tty,我们在这个新的tty中执行命令
******实时显示容器内部的资源使用情况: docker container stats 容器名  //cpu占用率,内存占用,网络io等
******杀死一个或多个容器: docker container kill 容器1[ 容器2 ...]  //默认向pid=1的进程sigkill信号, 可以使用-s指定不同的信号
******停止一个或多个容器: docker container stop 容器1[ 容器2 ...]  //默认向pid=1的进程发送sigterm信号,一段时间后(默认10秒,可以通过-t参数更改)如果容器还没有停止再发送sigkill信号
        *.kill和stop都能停止容器, 查了一下推荐使用stop. 其实应该学一下从0开始新建一个进程,再看看进程是怎么处理信号的, 以及每种信号的处理逻辑是什么. linux系统支持的signal都有哪些: https://man7.org/linux/man-pages/man7/signal.7.html
******重启容器: docker container restart 容器名  //应该就是先stop,再start,需要注意的是在stop时,先发sigterm,然后默认有10秒的等待时间,如果这10秒内容器没关闭, 再发送sigkill,这个等待时间同stop一样可以通过-t参数控制,即,docker container restart -t 20 容器名
******暂停容器内所有进程的执行: docker container pause 容器名
******恢复容器内被暂停的进程: docker container unpause 容器名   //你比如说你在容器中运行一个apache服务,当你pause容器后,地址请求后会一直等待(直到超时),当unpause后,立马有响应内容回来了
******给容器重新命名: docker container rename 容器 新容器名
******删除所有已停止的容器: docker container prune  //删掉的数据和我想的不一样,我以为一个容器的大小至少要大于所使用的image, 但实际情况是我删了N个container才释放了几兆的空间(当然我建立容器后没有做太多的操作), 所以容器应该是差异化存储, 也就是说多个容器都是从同一个image模板启动,但在不同容器里产生的数据会单独存储.这样就导致你要删除image前,必须要将引用它的容器删掉,否则你是删不掉相应的image的,这么做也是合逻辑的.想想我将image都删掉了,相应的容器肯定就起不来了,所以在删image之前要检查有没有使用它的容器这是一个合理的逻辑.
******查看容器和本地主机映口映射情况: docker container port 容器名  [容器端口[/协议]]//查看某个容器和主机全部的端口映射,以及查看容器中指定端口被映射为主机的哪个端口上,如果不加协议,则默认为tcp
******查看某个/些容器的详情: docker container inspect 容器1 容器2 ...  //就是表面所描述的, 查看详情,但目前还没想到什么情况下会去查看容器的详情(下面讲的docker container update中就可以用到inspect命令,看看要设置容器当前的各项资源参数都是多少)
******利用已有的容器创建新的image: docker container commit 已有容器 新容器tag    //docker container ls -a中的所有状态的容器都可作为基容器.场景是:当你利用imageA建立容器后,在你没有删掉该容器前,你在容器文件系统上做的改变都是有的, 但一旦你把这个容器删掉了,再利用imageA重新建一个容器, 因为imageA只是一个模板,所以之前利用imageA建的那个容器对文件系统的所有改变都没了, 如果你想要改变这些改变,则可以利用此时容器文件系统的状态,重新建立一个imageB,重新建立的imageB中的指令一般是继承了imageA的,但你在commit的时候可以通过--changes来改变CMD|ENTRYPOINT|ENV|EXPOSE|LABEL|ONBUILD|USER|VOLUME|WORKDIR这几个指令的值,当然也可以保持默认
******查看容器运行后对文件系统做了哪些改变: docker container diff 容器名  //改变有三种类型A,C,D分别 表示文件或目录被 追加,改变,删除
******导出容器的文件系统: docker container export -o path/of/.tar   //简单来说就是把容器里的文件系统当前状态导出一个备份, 导出来的.tar文件一般是配合docker image import -i tar文件来使用, 特点是因为导出的只是一个文件系统,并没有带CMD,ENTRYPOINT这些,所以这种导入一般有两种用法,一是在容器里运行,不过要手动指定入口命令:"docker image imported_image_id 手动要执行的命令", 另一种就是在某个Dockerfile中的FROM引用它(FROM可以使用imageid,还可以给image打标签,使用标签),以它作为基文件系统构建新的image.
******更新容器资源情况: docker container update 选项 选项值 容器名  //如cpu,内存等资源的设置
******当容器结束时返回容器的退出状态码: docker container wait 容器名  //命令执行时是阻塞的,直到等待的容器退出
******显示容器内的运行日志: docker container logs 选项 容器名
        *.这里面能看到的日志和/var/log/下的日志文件并没有关联,当docker 运行时,会新建协程将当前所有进程中的标准输出和标准错误流都重定向两个不同的管道,只要是重定向到这两个管道的内容都会被保存到容器所在主机的/var/lib/containers/容器id/容器id-json.log里,而我们这里的docker container logs输出的正是这个文件里的内容.
        *.我们都知道linux中的一个思想是万物皆文件,进程也不例外, 在容器中通过ps -ef看到的所有进程号在/proc里都有一个以进程号命名的文件夹,里面的fd子文件夹下就包含着一系列的文件,基本上0,1,2这三个文件一般是都有的,这三个文件代表着标准输入,标准输出和标准错误,在这里我们ls -l看一下这三个文件的属性,会发现1和2被绑定到了两个管道,此时我们如果在另一个窗口运行docker container logs -f 容器名 的话, 我们echo 123 > 1 或echo 123 >2就会看到该窗口中有输出了
        *.所以说,如果我们想在docker container logs 容器名 中看到日志输出,就要想办法和协程为标准输出和标准错误建的那两个管道相关联,如将标准输出重定向到进程号为1的标准输出文件: for i in `seq 1 10`;do echo $i 1>/proc/1/fd/1;done
        *.docker中get started part1中的视频(https://www.youtube.com/watch?v=8fi7uSYlOdc),Containers From Scratch很好,讲了从0开始构建一个容器,关键是看一下如果利用username控制进程能看到的,和利用control group控制着你能用什么.  //动手实践一下如何构建一个进程以及设置相应的属性
